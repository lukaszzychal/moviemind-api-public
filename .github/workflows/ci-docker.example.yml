name: CI (Docker)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.2', '8.3', '8.4']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          tags: moviemind-php:${{ matrix.php-versions }}
          build-args: |
            PHP_VERSION=${{ matrix.php-versions }}
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start services with docker compose
        run: |
          docker compose up -d db redis
          # Wait for services to be ready
          docker compose exec -T db pg_isready -U moviemind || sleep 5

      - name: Run tests in container
        run: |
          docker compose run --rm -e APP_ENV=testing \
            -e DB_CONNECTION=pgsql \
            -e DB_HOST=db \
            -e DB_DATABASE=moviemind_test \
            -e DB_USERNAME=moviemind \
            -e DB_PASSWORD=moviemind \
            php bash -lc "composer install && composer test"

      - name: Cleanup
        if: always()
        run: docker compose down -v

  security:
    name: Security & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          tags: moviemind-php:security
          push: false
          load: true

      - name: Run security checks
        run: |
          docker compose run --rm php bash -lc "
            composer install &&
            composer audit --no-dev || true &&
            vendor/bin/pint -v --test || echo 'Pint check' &&
            vendor/bin/phpstan analyse --memory-limit=2G || echo 'PHPStan check'
          "

