name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ['8.2', '8.3', '8.4']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, curl, libxml, zip, sqlite3, pdo_sqlite
          coverage: xdebug

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-versions }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-versions }}-

      - name: Install dependencies
        working-directory: api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run unit/feature tests
        working-directory: api
        run: composer test

  security:
    name: Security & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, curl, libxml, zip

      - name: Install dependencies
        working-directory: api
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Composer audit
        working-directory: api
        run: composer audit --no-dev || true

      - name: PHP style (Pint, no fix)
        working-directory: api
        run: |
          if [ -f vendor/bin/pint ]; then vendor/bin/pint -v --test; else echo "Pint not installed"; fi

      - name: PHPStan static analysis
        working-directory: api
        run: |
          if [ -f vendor/bin/phpstan ]; then vendor/bin/phpstan analyse --memory-limit=2G; else echo "PHPStan not installed"; fi

      - name: GitLeaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          args: "detect --no-git --source=."
        continue-on-error: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (PR) or Build and Push (push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/php/Dockerfile
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}
          tags: |
            ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max



